支持冒号方式初始化

1.结构体的初始化
结构体是常用的自定义构造类型，是一种很常见的数据打包方法。结构体对象的初始化有多种方式，分为指定初始化、顺序初始化、构造函数初始化。假如有如下结构体。

struct A
{
    int b;
    int c;
}

（1）指定初始化（Designated Initializer）实现上有两种方式，一种是通过点号加赋值符号实现，即“.fieldname=value”，另外一种是通过冒号实现，即“fieldname:value”，其中fieldname为指定的结构体成员名称。前一种是C99标准引入的结构体初始化方式，但在C++中，很多编译器并不支持。

//点号+赋值符号
struct A a={.b = 1,.c = 2};

//冒号
struct A a={b:1,c:2}；

Linux内核喜欢用“.fieldname=value”的方式进行初始化，使用指定初始化，一个明显的优点是成员初始化顺序和个数可变，并且扩展性好，比如增加字段时，避免了传统顺序初始化带来的大量修改。

（2）顺序初始化是我们最常用的初始化方式，因为书写起来较为简约，但相对于指定初始化，无法变更初始化顺序，灵活性较差。

struct A a1={1,2};
1
（3）构造函数初始化常见于C++代码中，因为C++中的struct可以看作class，结构体也可以拥有构造函数，所以我们可以通过结构体的构造函数来初始化结构体对象。给定带有构造函数的结构体：

struct A 
{
    A(int a,int b)
    {
        this->a=a;
        this->b=b;
    };
    int b;
    int c;
}

那么结构体对象的初始化可以像类对象的初始化那样，如下形式：

struct A a(1,2);
1
注意： struct如果定义了构造函数的话，就不能用大括号进行初始化了，即不能再使用指定初始化与顺序初始化了。

2.结构体的赋值
变量的赋值和初始化是不一样的，初始化是在变量定义的时候完成的，是属于变量定义的一部分，赋值是在变量定义完成之后想改变变量值的时候所采取的操作。还是给定结构体A:

struct A
{
    int b;
    int c;
}
注意：结构体变量的赋值是不能采用大括号的方式进行赋值的，例如下面的赋值是不允许的。

struct A  a;
//错误赋值
a={1,2};

下面列出常见结构体变量赋值的方法。

（1）使用memset对结构体变量进行置空操作：

//按照编译器默认的方式进行初始化（如果a是全局静态存储区的变量，默认初始化为0，如果是栈上的局部变量，默认初始化为随机值）
struct A a; 
memset(&a,0,sizeof(a));

（2）依次给每一个结构体成员变量进行赋值：

struct A a; 
a.b=1;
a.c=2;

（3）使用已有的结构体变量给另一个结构体变量赋值。也就是说结构体变量之间是可以相互赋值的。

struct A a={1,2};
struct A aa;
aa=a;               //将已有的结构体变量付给aa

初始化与赋值有着本质的却别，初始化是变量定义时的第一次赋值，赋值则是定义之后的值的变更操作，概念上不同，所以实现上也不一样。
